// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type Value = boolean | string | number | null | undefined;

export const Value = autoguard.Union.of(
	autoguard.Boolean,
	autoguard.String,
	autoguard.Number,
	autoguard.Null,
	autoguard.Undefined
);

export type IndexEntry = {
	"token": Value,
	"index": number
};

export const IndexEntry = autoguard.Object.of<IndexEntry>({
	"token": autoguard.Reference.of<Value>(() => Value),
	"index": autoguard.Number
});

export type KeyEntry = {
	"key": Value
};

export const KeyEntry = autoguard.Object.of<KeyEntry>({
	"key": autoguard.Reference.of<Value>(() => Value)
});

export type Autoguard = {
	"Value": Value,
	"IndexEntry": IndexEntry,
	"KeyEntry": KeyEntry
};

export const Autoguard = {
	"Value": Value,
	"IndexEntry": IndexEntry,
	"KeyEntry": KeyEntry
};
