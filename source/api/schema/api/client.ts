// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";
import * as shared from "./index";

export const makeClient = (options?: Partial<{
	urlPrefix: string,
	requestHandler: autoguard.api.RequestHandler
}>): autoguard.api.Client<shared.Autoguard.Requests, shared.Autoguard.Responses> => ({
	"POST:/auth/": async (request) => {
		let guard = shared.Autoguard.Requests["POST:/auth/"];
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push(decodeURIComponent("auth"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["x-circus-token"] = autoguard.api.getStringOption(raw.headers, "x-circus-token");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["POST:/auth/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"POST:/users/": async (request) => {
		let guard = shared.Autoguard.Requests["POST:/users/"];
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["POST:/users/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/actors/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/actors/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("actors"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/actors/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/actors/<actor_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/actors/<actor_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("actors"));
		components.push(String(request.options["actor_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["actor_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/actors/<actor_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/actors/<actor_id>/movies/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/actors/<actor_id>/movies/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("actors"));
		components.push(String(request.options["actor_id"]));
		components.push(decodeURIComponent("movies"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["actor_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/actors/<actor_id>/movies/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/actors/<actor_id>/shows/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/actors/<actor_id>/shows/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("actors"));
		components.push(String(request.options["actor_id"]));
		components.push(decodeURIComponent("shows"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["actor_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/actors/<actor_id>/shows/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/albums/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/albums/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("albums"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/albums/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/albums/<album_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/albums/<album_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("albums"));
		components.push(String(request.options["album_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["album_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/albums/<album_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/artists/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/artists/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("artists"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/artists/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/artists/<artist_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/artists/<artist_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("artists"));
		components.push(String(request.options["artist_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["artist_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/artists/<artist_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/discs/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/discs/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("discs"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/discs/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/discs/<disc_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/discs/<disc_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("discs"));
		components.push(String(request.options["disc_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["disc_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/discs/<disc_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/episodes/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/episodes/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("episodes"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/episodes/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/episodes/<episode_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/episodes/<episode_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("episodes"));
		components.push(String(request.options["episode_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["episode_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/episodes/<episode_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/genres/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/genres/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("genres"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/genres/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/genres/<genre_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/genres/<genre_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("genres"));
		components.push(String(request.options["genre_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["genre_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/genres/<genre_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/genres/<genre_id>/movies/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/genres/<genre_id>/movies/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("genres"));
		components.push(String(request.options["genre_id"]));
		components.push(decodeURIComponent("movies"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["genre_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/genres/<genre_id>/movies/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/genres/<genre_id>/shows/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/genres/<genre_id>/shows/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("genres"));
		components.push(String(request.options["genre_id"]));
		components.push(decodeURIComponent("shows"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["genre_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/genres/<genre_id>/shows/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/movies/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/movies/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("movies"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/movies/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/movies/<movie_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/movies/<movie_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("movies"));
		components.push(String(request.options["movie_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["movie_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/movies/<movie_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/movies/<movie_id>/suggestions/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/movies/<movie_id>/suggestions/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("movies"));
		components.push(String(request.options["movie_id"]));
		components.push(decodeURIComponent("suggestions"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["movie_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/movies/<movie_id>/suggestions/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/playlists/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/playlists/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("playlists"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/playlists/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/playlists/<playlist_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/playlists/<playlist_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("playlists"));
		components.push(String(request.options["playlist_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["playlist_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/playlists/<playlist_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/seasons/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/seasons/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("seasons"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/seasons/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/seasons/<season_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/seasons/<season_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("seasons"));
		components.push(String(request.options["season_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["season_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/seasons/<season_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/shows/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/shows/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("shows"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/shows/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/shows/<show_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/shows/<show_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("shows"));
		components.push(String(request.options["show_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["show_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/shows/<show_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/tracks/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/tracks/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("tracks"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/tracks/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/tracks/<track_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/tracks/<track_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("tracks"));
		components.push(String(request.options["track_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["track_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/tracks/<track_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/tracks/<track_id>/playlists/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/tracks/<track_id>/playlists/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("tracks"));
		components.push(String(request.options["track_id"]));
		components.push(decodeURIComponent("playlists"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["track_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/tracks/<track_id>/playlists/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/users/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/users/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/users/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/users/<user_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/users/<user_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(String(request.options["user_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["user_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/users/<user_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/users/<user_id>/albums/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/users/<user_id>/albums/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(String(request.options["user_id"]));
		components.push(decodeURIComponent("albums"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["user_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/users/<user_id>/albums/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/users/<user_id>/playlists/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/users/<user_id>/playlists/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(String(request.options["user_id"]));
		components.push(decodeURIComponent("playlists"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["user_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/users/<user_id>/playlists/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/users/<user_id>/shows/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/users/<user_id>/shows/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("users"));
		components.push(String(request.options["user_id"]));
		components.push(decodeURIComponent("shows"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["user_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/users/<user_id>/shows/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/years/<query>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/years/<query>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("years"));
		components.push(String(request.options["query"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["query"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/years/<query>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/years/<year_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/years/<year_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("years"));
		components.push(String(request.options["year_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["year_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/years/<year_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/years/<year_id>/albums/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/years/<year_id>/albums/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("years"));
		components.push(String(request.options["year_id"]));
		components.push(decodeURIComponent("albums"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["year_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/years/<year_id>/albums/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/years/<year_id>/movies/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/years/<year_id>/movies/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("years"));
		components.push(String(request.options["year_id"]));
		components.push(decodeURIComponent("movies"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["year_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/years/<year_id>/movies/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/files/<file_id>/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/files/<file_id>/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("files"));
		components.push(String(request.options["file_id"]));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["file_id"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = raw.payload;
			let guard = shared.Autoguard.Responses["GET:/files/<file_id>/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response);
		}
	},
});
