// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";
import { Actor } from ".././objects";
import { Album } from ".././objects";
import { Artist } from ".././objects";
import { Disc } from ".././objects";
import { Entity } from ".././objects";
import { Episode } from ".././objects";
import { ErrorMessage } from ".././messages";
import { Genre } from ".././objects";
import { Movie } from ".././objects";
import { Playlist } from ".././objects";
import { RegisterRequest } from ".././messages";
import { RegisterResponse } from ".././messages";
import { Season } from ".././objects";
import { Show } from ".././objects";
import { Track } from ".././objects";
import { User } from ".././objects";
import { Year } from ".././objects";

export namespace Autoguard {
	export const Guards = {};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {
		"POST:/auth/": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Options,
					autoguard.guards.Object.of({})
				)
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.api.Headers,
				autoguard.guards.Object.of({
					"x-circus-username": autoguard.guards.String,
					"x-circus-password": autoguard.guards.String
				})
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"POST:/users/": autoguard.guards.Object.of({
			"options": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Options,
					autoguard.guards.Object.of({})
				)
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Reference.of(() => RegisterRequest)
		}),
		"GET:/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"cues": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Boolean
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/actors/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/actors/<actor_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"actor_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/actors/<actor_id>/movies/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"actor_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/actors/<actor_id>/shows/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"actor_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/albums/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/albums/<album_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"album_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/artists/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/artists/<artist_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"artist_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/discs/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/discs/<disc_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"disc_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/episodes/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/episodes/<episode_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"episode_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/genres/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/genres/<genre_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"genre_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/genres/<genre_id>/movies/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"genre_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/genres/<genre_id>/shows/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"genre_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/movies/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/movies/<movie_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"movie_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/movies/<movie_id>/suggestions/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"movie_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/playlists/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/playlists/<playlist_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"playlist_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/seasons/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/seasons/<season_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"season_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/shows/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/shows/<show_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"show_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/tracks/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/tracks/<track_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"track_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/tracks/<track_id>/playlists/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"track_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/users/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/users/<user_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"user_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/users/<user_id>/albums/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"user_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/users/<user_id>/playlists/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"user_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/users/<user_id>/shows/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"user_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/years/<query>": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"query": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/years/<year_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"year_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/years/<year_id>/albums/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"year_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/years/<year_id>/movies/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"year_id": autoguard.guards.String,
					"token": autoguard.guards.String,
					"offset": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"limit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					)
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/files/<file_id>/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"file_id": autoguard.guards.String,
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"GET:/statistics/": autoguard.guards.Object.of({
			"options": autoguard.guards.Intersection.of(
				autoguard.api.Options,
				autoguard.guards.Object.of({
					"token": autoguard.guards.String
				})
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		})
	};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {
		"POST:/auth/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Intersection.of(
				autoguard.api.Headers,
				autoguard.guards.Object.of({
					"x-circus-token": autoguard.guards.String
				})
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Undefined
			)
		}),
		"POST:/users/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Union.of(
				autoguard.guards.Reference.of(() => RegisterResponse),
				autoguard.guards.Reference.of(() => ErrorMessage)
			)
		}),
		"GET:/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"entities": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Entity))
			})
		}),
		"GET:/actors/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"actors": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Actor))
			})
		}),
		"GET:/actors/<actor_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"actor": autoguard.guards.Reference.of(() => Actor)
			})
		}),
		"GET:/actors/<actor_id>/movies/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movies": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Movie))
			})
		}),
		"GET:/actors/<actor_id>/shows/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"shows": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Show))
			})
		}),
		"GET:/albums/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"albums": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Album))
			})
		}),
		"GET:/albums/<album_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"album": autoguard.guards.Reference.of(() => Album)
			})
		}),
		"GET:/artists/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"artists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Artist))
			})
		}),
		"GET:/artists/<artist_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"artist": autoguard.guards.Reference.of(() => Artist),
				"tracks": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Track)),
				"appearances": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Album))
			})
		}),
		"GET:/discs/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"discs": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Disc))
			})
		}),
		"GET:/discs/<disc_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"disc": autoguard.guards.Reference.of(() => Disc),
				"last": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Disc)
				),
				"next": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Disc)
				)
			})
		}),
		"GET:/episodes/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"episodes": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Episode))
			})
		}),
		"GET:/episodes/<episode_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"episode": autoguard.guards.Reference.of(() => Episode),
				"last": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Episode)
				),
				"next": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Episode)
				)
			})
		}),
		"GET:/genres/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"genres": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Genre))
			})
		}),
		"GET:/genres/<genre_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"genre": autoguard.guards.Reference.of(() => Genre)
			})
		}),
		"GET:/genres/<genre_id>/movies/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movies": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Movie))
			})
		}),
		"GET:/genres/<genre_id>/shows/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"shows": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Show))
			})
		}),
		"GET:/movies/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movies": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Movie))
			})
		}),
		"GET:/movies/<movie_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movie": autoguard.guards.Reference.of(() => Movie)
			})
		}),
		"GET:/movies/<movie_id>/suggestions/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movies": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Movie))
			})
		}),
		"GET:/playlists/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"playlists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Playlist))
			})
		}),
		"GET:/playlists/<playlist_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"playlist": autoguard.guards.Reference.of(() => Playlist)
			})
		}),
		"GET:/seasons/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"seasons": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Season))
			})
		}),
		"GET:/seasons/<season_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"season": autoguard.guards.Reference.of(() => Season),
				"last": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Season)
				),
				"next": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Season)
				)
			})
		}),
		"GET:/shows/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"shows": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Show))
			})
		}),
		"GET:/shows/<show_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"show": autoguard.guards.Reference.of(() => Show)
			})
		}),
		"GET:/tracks/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"tracks": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Track))
			})
		}),
		"GET:/tracks/<track_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"track": autoguard.guards.Reference.of(() => Track),
				"last": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Track)
				),
				"next": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Reference.of(() => Track)
				)
			})
		}),
		"GET:/tracks/<track_id>/playlists/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"playlists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Playlist))
			})
		}),
		"GET:/users/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"users": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => User))
			})
		}),
		"GET:/users/<user_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"user": autoguard.guards.Reference.of(() => User)
			})
		}),
		"GET:/users/<user_id>/albums/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"albums": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Album))
			})
		}),
		"GET:/users/<user_id>/playlists/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"playlists": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Playlist))
			})
		}),
		"GET:/users/<user_id>/shows/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"shows": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Show))
			})
		}),
		"GET:/years/<query>": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"years": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Year))
			})
		}),
		"GET:/years/<year_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"year": autoguard.guards.Reference.of(() => Year)
			})
		}),
		"GET:/years/<year_id>/albums/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"albums": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Album))
			})
		}),
		"GET:/years/<year_id>/movies/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"movies": autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Movie))
			})
		}),
		"GET:/files/<file_id>/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.api.Binary
		}),
		"GET:/statistics/": autoguard.guards.Object.of({
			"status": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Number
			),
			"headers": autoguard.guards.Union.of(
				autoguard.guards.Undefined,
				autoguard.guards.Intersection.of(
					autoguard.api.Headers,
					autoguard.guards.Object.of({})
				)
			),
			"payload": autoguard.guards.Object.of({
				"statistics": autoguard.guards.Array.of(autoguard.guards.Object.of({
					"title": autoguard.guards.String,
					"value": autoguard.guards.Number,
					"unit": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Union.of(
							autoguard.guards.StringLiteral.of("BYTES"),
							autoguard.guards.StringLiteral.of("MILLISECONDS")
						)
					)
				}))
			})
		})
	};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
