// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type VideoFrame = {
	"pkt_pts_time": string
};

export const VideoFrame = {
	as(subject: any, path: string = ""): VideoFrame {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["pkt_pts_time"], path + "[\"pkt_pts_time\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is VideoFrame {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ShowFrames = {
	"frames": VideoFrame[]
};

export const ShowFrames = {
	as(subject: any, path: string = ""): ShowFrames {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(VideoFrame.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["frames"], path + "[\"frames\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ShowFrames {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Stream = {
	"start_time": string,
	"duration": string
};

export const Stream = {
	as(subject: any, path: string = ""): Stream {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["start_time"], path + "[\"start_time\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["duration"], path + "[\"duration\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Stream {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ShowStreams = {
	"streams": Stream[]
};

export const ShowStreams = {
	as(subject: any, path: string = ""): ShowStreams {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Stream.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["streams"], path + "[\"streams\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ShowStreams {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"VideoFrame": VideoFrame,
	"ShowFrames": ShowFrames,
	"Stream": Stream,
	"ShowStreams": ShowStreams
};

export const Autoguard = {
	"VideoFrame": VideoFrame,
	"ShowFrames": ShowFrames,
	"Stream": Stream,
	"ShowStreams": ShowStreams
};
