// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type EpisodeMetadata = {
	"type": "episode",
	"title": string,
	"season": number,
	"episode": number,
	"year"?: number,
	"summary"?: string,
	"show": {
		"title": string,
		"summary"?: string
	}
};

export const EpisodeMetadata = autoguard.Object.of<EpisodeMetadata>({
	"type": autoguard.StringLiteral.of("episode"),
	"title": autoguard.String,
	"season": autoguard.Number,
	"episode": autoguard.Number,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	),
	"show": autoguard.Object.of<{
		"title": string,
		"summary"?: string
	}>({
		"title": autoguard.String,
		"summary": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		)
	})
});

export type MovieMetadata = {
	"type": "movie",
	"title": string,
	"year"?: number,
	"summary"?: string
};

export const MovieMetadata = autoguard.Object.of<MovieMetadata>({
	"type": autoguard.StringLiteral.of("movie"),
	"title": autoguard.String,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type TrackMetadata = {
	"type": "track",
	"title": string,
	"disc": number,
	"track": number,
	"album": {
		"title": string,
		"year"?: number,
		"artists": {
			"title": string
		}[]
	},
	"artists": {
		"title": string
	}[]
};

export const TrackMetadata = autoguard.Object.of<TrackMetadata>({
	"type": autoguard.StringLiteral.of("track"),
	"title": autoguard.String,
	"disc": autoguard.Number,
	"track": autoguard.Number,
	"album": autoguard.Object.of<{
		"title": string,
		"year"?: number,
		"artists": {
			"title": string
		}[]
	}>({
		"title": autoguard.String,
		"year": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.Number
		),
		"artists": autoguard.Array.of(autoguard.Object.of<{
			"title": string
		}>({
			"title": autoguard.String
		}))
	}),
	"artists": autoguard.Array.of(autoguard.Object.of<{
		"title": string
	}>({
		"title": autoguard.String
	}))
});

export type Metadata = EpisodeMetadata | MovieMetadata | TrackMetadata;

export const Metadata = autoguard.Union.of(
	autoguard.Reference.of<EpisodeMetadata>(() => EpisodeMetadata),
	autoguard.Reference.of<MovieMetadata>(() => MovieMetadata),
	autoguard.Reference.of<TrackMetadata>(() => TrackMetadata)
);

export type AudioStream = {
	"type": "audio",
	"duration_ms": number
};

export const AudioStream = autoguard.Object.of<AudioStream>({
	"type": autoguard.StringLiteral.of("audio"),
	"duration_ms": autoguard.Number
});

export type ImageStream = {
	"type": "image",
	"width": number,
	"height": number
};

export const ImageStream = autoguard.Object.of<ImageStream>({
	"type": autoguard.StringLiteral.of("image"),
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type SubtitleStream = {
	"type": "subtitle",
	"duration_ms": number
};

export const SubtitleStream = autoguard.Object.of<SubtitleStream>({
	"type": autoguard.StringLiteral.of("subtitle"),
	"duration_ms": autoguard.Number
});

export type UnknownStream = {
	"type": "unknown"
};

export const UnknownStream = autoguard.Object.of<UnknownStream>({
	"type": autoguard.StringLiteral.of("unknown")
});

export type VideoStream = {
	"type": "video",
	"duration_ms": number,
	"width": number,
	"height": number
};

export const VideoStream = autoguard.Object.of<VideoStream>({
	"type": autoguard.StringLiteral.of("video"),
	"duration_ms": autoguard.Number,
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type Stream = AudioStream | ImageStream | SubtitleStream | UnknownStream | VideoStream;

export const Stream = autoguard.Union.of(
	autoguard.Reference.of<AudioStream>(() => AudioStream),
	autoguard.Reference.of<ImageStream>(() => ImageStream),
	autoguard.Reference.of<SubtitleStream>(() => SubtitleStream),
	autoguard.Reference.of<UnknownStream>(() => UnknownStream),
	autoguard.Reference.of<VideoStream>(() => VideoStream)
);

export type Probe = {
	"metadata"?: Metadata,
	"streams": Stream[]
};

export const Probe = autoguard.Object.of<Probe>({
	"metadata": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Reference.of<Metadata>(() => Metadata)
	),
	"streams": autoguard.Array.of(autoguard.Reference.of<Stream>(() => Stream))
});

export type Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata,
	"TrackMetadata": TrackMetadata,
	"Metadata": Metadata,
	"AudioStream": AudioStream,
	"ImageStream": ImageStream,
	"SubtitleStream": SubtitleStream,
	"UnknownStream": UnknownStream,
	"VideoStream": VideoStream,
	"Stream": Stream,
	"Probe": Probe
};

export const Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata,
	"TrackMetadata": TrackMetadata,
	"Metadata": Metadata,
	"AudioStream": AudioStream,
	"ImageStream": ImageStream,
	"SubtitleStream": SubtitleStream,
	"UnknownStream": UnknownStream,
	"VideoStream": VideoStream,
	"Stream": Stream,
	"Probe": Probe
};
