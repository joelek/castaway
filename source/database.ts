// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type ArtistEntry = {
	"artist_id": string,
	"title": string
};

export const ArtistEntry = autoguard.Object.of<ArtistEntry>({
	"artist_id": autoguard.String,
	"title": autoguard.String
});

export type AlbumEntry = {
	"album_id": string,
	"title": string,
	"year": number,
	"cover_file_id": (string | null)
};

export const AlbumEntry = autoguard.Object.of<AlbumEntry>({
	"album_id": autoguard.String,
	"title": autoguard.String,
	"year": autoguard.Number,
	"cover_file_id": autoguard.Union.of(
		autoguard.String,
		autoguard.Null
	)
});

export type DiscEntry = {
	"disc_id": string,
	"album_id": string,
	"number": number
};

export const DiscEntry = autoguard.Object.of<DiscEntry>({
	"disc_id": autoguard.String,
	"album_id": autoguard.String,
	"number": autoguard.Number
});

export type TrackEntry = {
	"track_id": string,
	"disc_id": string,
	"file_id": string,
	"title": string,
	"number": number,
	"duration": number
};

export const TrackEntry = autoguard.Object.of<TrackEntry>({
	"track_id": autoguard.String,
	"disc_id": autoguard.String,
	"file_id": autoguard.String,
	"title": autoguard.String,
	"number": autoguard.Number,
	"duration": autoguard.Number
});

export type AlbumArtistEntry = {
	"album_id": string,
	"artist_id": string
};

export const AlbumArtistEntry = autoguard.Object.of<AlbumArtistEntry>({
	"album_id": autoguard.String,
	"artist_id": autoguard.String
});

export type TrackArtistEntry = {
	"track_id": string,
	"artist_id": string
};

export const TrackArtistEntry = autoguard.Object.of<TrackArtistEntry>({
	"track_id": autoguard.String,
	"artist_id": autoguard.String
});

export type VideoGenreEntry = {
	"video_genre_id": string,
	"title": string
};

export const VideoGenreEntry = autoguard.Object.of<VideoGenreEntry>({
	"video_genre_id": autoguard.String,
	"title": autoguard.String
});

export type MovieEntry = {
	"movie_id": string,
	"title": string,
	"year": number,
	"summary": (string | null),
	"poster_file_id": (string | null)
};

export const MovieEntry = autoguard.Object.of<MovieEntry>({
	"movie_id": autoguard.String,
	"title": autoguard.String,
	"year": autoguard.Number,
	"summary": autoguard.Union.of(
		autoguard.String,
		autoguard.Null
	),
	"poster_file_id": autoguard.Union.of(
		autoguard.String,
		autoguard.Null
	)
});

export type MovieGenreEntry = {
	"movie_id": string,
	"video_genre_id": string
};

export const MovieGenreEntry = autoguard.Object.of<MovieGenreEntry>({
	"movie_id": autoguard.String,
	"video_genre_id": autoguard.String
});

export type MoviePartEntry = {
	"movie_part_id": string,
	"movie_id": string,
	"file_id": string,
	"duration": number,
	"number": number
};

export const MoviePartEntry = autoguard.Object.of<MoviePartEntry>({
	"movie_part_id": autoguard.String,
	"movie_id": autoguard.String,
	"file_id": autoguard.String,
	"duration": autoguard.Number,
	"number": autoguard.Number
});

export type ShowEntry = {
	"show_id": string,
	"title": string
};

export const ShowEntry = autoguard.Object.of<ShowEntry>({
	"show_id": autoguard.String,
	"title": autoguard.String
});

export type ShowGenreEntry = {
	"show_id": string,
	"video_genre_id": string
};

export const ShowGenreEntry = autoguard.Object.of<ShowGenreEntry>({
	"show_id": autoguard.String,
	"video_genre_id": autoguard.String
});

export type SeasonEntry = {
	"season_id": string,
	"show_id": string,
	"number": number
};

export const SeasonEntry = autoguard.Object.of<SeasonEntry>({
	"season_id": autoguard.String,
	"show_id": autoguard.String,
	"number": autoguard.Number
});

export type EpisodeEntry = {
	"episode_id": string,
	"season_id": string,
	"file_id": string,
	"title": string,
	"number": number,
	"duration": number,
	"summary": (string | null)
};

export const EpisodeEntry = autoguard.Object.of<EpisodeEntry>({
	"episode_id": autoguard.String,
	"season_id": autoguard.String,
	"file_id": autoguard.String,
	"title": autoguard.String,
	"number": autoguard.Number,
	"duration": autoguard.Number,
	"summary": autoguard.Union.of(
		autoguard.String,
		autoguard.Null
	)
});

export type SubtitleEntry = {
	"subtitle_id": string,
	"file_id": string,
	"video_file_id": string,
	"language": (string | null)
};

export const SubtitleEntry = autoguard.Object.of<SubtitleEntry>({
	"subtitle_id": autoguard.String,
	"file_id": autoguard.String,
	"video_file_id": autoguard.String,
	"language": autoguard.Union.of(
		autoguard.String,
		autoguard.Null
	)
});

export type SubtitleContentEntry = {
	"subtitle_id": string,
	"cues": [
		number,
		number,
		string
	][]
};

export const SubtitleContentEntry = autoguard.Object.of<SubtitleContentEntry>({
	"subtitle_id": autoguard.String,
	"cues": autoguard.Array.of(autoguard.Tuple.of(
		autoguard.Number,
		autoguard.Number,
		autoguard.String
	))
});

export type CueEntry = {
	"cue_id": string,
	"subtitle_id": string,
	"start_ms": number,
	"duration_ms": number,
	"lines": string[]
};

export const CueEntry = autoguard.Object.of<CueEntry>({
	"cue_id": autoguard.String,
	"subtitle_id": autoguard.String,
	"start_ms": autoguard.Number,
	"duration_ms": autoguard.Number,
	"lines": autoguard.Array.of(autoguard.String)
});

export type FileEntry = {
	"file_id": string,
	"path": string[],
	"mime": string
};

export const FileEntry = autoguard.Object.of<FileEntry>({
	"file_id": autoguard.String,
	"path": autoguard.Array.of(autoguard.String),
	"mime": autoguard.String
});

export type MediaDatabase = {
	"audio": {
		"artists": ArtistEntry[],
		"albums": AlbumEntry[],
		"discs": DiscEntry[],
		"tracks": TrackEntry[],
		"album_artists": AlbumArtistEntry[],
		"track_artists": TrackArtistEntry[]
	},
	"video": {
		"genres": VideoGenreEntry[],
		"movie_parts": MoviePartEntry[],
		"movies": MovieEntry[],
		"movie_genres": MovieGenreEntry[],
		"shows": ShowEntry[],
		"show_genres": ShowGenreEntry[],
		"seasons": SeasonEntry[],
		"episodes": EpisodeEntry[],
		"subtitles": SubtitleEntry[],
		"subtitle_contents": SubtitleContentEntry[]
	},
	"files": FileEntry[]
};

export const MediaDatabase = autoguard.Object.of<MediaDatabase>({
	"audio": autoguard.Object.of<{
		"artists": ArtistEntry[],
		"albums": AlbumEntry[],
		"discs": DiscEntry[],
		"tracks": TrackEntry[],
		"album_artists": AlbumArtistEntry[],
		"track_artists": TrackArtistEntry[]
	}>({
		"artists": autoguard.Array.of(autoguard.Reference.of<ArtistEntry>(() => ArtistEntry)),
		"albums": autoguard.Array.of(autoguard.Reference.of<AlbumEntry>(() => AlbumEntry)),
		"discs": autoguard.Array.of(autoguard.Reference.of<DiscEntry>(() => DiscEntry)),
		"tracks": autoguard.Array.of(autoguard.Reference.of<TrackEntry>(() => TrackEntry)),
		"album_artists": autoguard.Array.of(autoguard.Reference.of<AlbumArtistEntry>(() => AlbumArtistEntry)),
		"track_artists": autoguard.Array.of(autoguard.Reference.of<TrackArtistEntry>(() => TrackArtistEntry))
	}),
	"video": autoguard.Object.of<{
		"genres": VideoGenreEntry[],
		"movie_parts": MoviePartEntry[],
		"movies": MovieEntry[],
		"movie_genres": MovieGenreEntry[],
		"shows": ShowEntry[],
		"show_genres": ShowGenreEntry[],
		"seasons": SeasonEntry[],
		"episodes": EpisodeEntry[],
		"subtitles": SubtitleEntry[],
		"subtitle_contents": SubtitleContentEntry[]
	}>({
		"genres": autoguard.Array.of(autoguard.Reference.of<VideoGenreEntry>(() => VideoGenreEntry)),
		"movie_parts": autoguard.Array.of(autoguard.Reference.of<MoviePartEntry>(() => MoviePartEntry)),
		"movies": autoguard.Array.of(autoguard.Reference.of<MovieEntry>(() => MovieEntry)),
		"movie_genres": autoguard.Array.of(autoguard.Reference.of<MovieGenreEntry>(() => MovieGenreEntry)),
		"shows": autoguard.Array.of(autoguard.Reference.of<ShowEntry>(() => ShowEntry)),
		"show_genres": autoguard.Array.of(autoguard.Reference.of<ShowGenreEntry>(() => ShowGenreEntry)),
		"seasons": autoguard.Array.of(autoguard.Reference.of<SeasonEntry>(() => SeasonEntry)),
		"episodes": autoguard.Array.of(autoguard.Reference.of<EpisodeEntry>(() => EpisodeEntry)),
		"subtitles": autoguard.Array.of(autoguard.Reference.of<SubtitleEntry>(() => SubtitleEntry)),
		"subtitle_contents": autoguard.Array.of(autoguard.Reference.of<SubtitleContentEntry>(() => SubtitleContentEntry))
	}),
	"files": autoguard.Array.of(autoguard.Reference.of<FileEntry>(() => FileEntry))
});

export type SubtitlesDatabase = Record<string, undefined | string[]>;

export const SubtitlesDatabase = autoguard.Record.of(autoguard.Array.of(autoguard.String));

export type AudiolistEntry = {
	"audiolist_id": string,
	"title": string
};

export const AudiolistEntry = autoguard.Object.of<AudiolistEntry>({
	"audiolist_id": autoguard.String,
	"title": autoguard.String
});

export type AudiolistItemEntry = {
	"audiolist_id": string,
	"track_id": string,
	"number": number
};

export const AudiolistItemEntry = autoguard.Object.of<AudiolistItemEntry>({
	"audiolist_id": autoguard.String,
	"track_id": autoguard.String,
	"number": autoguard.Number
});

export type ListDatabase = {
	"audiolists": AudiolistEntry[],
	"audiolist_items": AudiolistItemEntry[]
};

export const ListDatabase = autoguard.Object.of<ListDatabase>({
	"audiolists": autoguard.Array.of(autoguard.Reference.of<AudiolistEntry>(() => AudiolistEntry)),
	"audiolist_items": autoguard.Array.of(autoguard.Reference.of<AudiolistItemEntry>(() => AudiolistItemEntry))
});

export type UserEntry = {
	"user_id": string,
	"username": string,
	"password": string
};

export const UserEntry = autoguard.Object.of<UserEntry>({
	"user_id": autoguard.String,
	"username": autoguard.String,
	"password": autoguard.String
});

export type AuthToken = {
	"username": string,
	"selector": string,
	"validator_hash": string,
	"expires_ms": number
};

export const AuthToken = autoguard.Object.of<AuthToken>({
	"username": autoguard.String,
	"selector": autoguard.String,
	"validator_hash": autoguard.String,
	"expires_ms": autoguard.Number
});

export type UserDatabase = {
	"users": UserEntry[],
	"tokens": AuthToken[]
};

export const UserDatabase = autoguard.Object.of<UserDatabase>({
	"users": autoguard.Array.of(autoguard.Reference.of<UserEntry>(() => UserEntry)),
	"tokens": autoguard.Array.of(autoguard.Reference.of<AuthToken>(() => AuthToken))
});

export type Stream = {
	"username": string,
	"file_id": string,
	"timestamp_ms": number
};

export const Stream = autoguard.Object.of<Stream>({
	"username": autoguard.String,
	"file_id": autoguard.String,
	"timestamp_ms": autoguard.Number
});

export type StreamDatabase = {
	"streams": Stream[]
};

export const StreamDatabase = autoguard.Object.of<StreamDatabase>({
	"streams": autoguard.Array.of(autoguard.Reference.of<Stream>(() => Stream))
});

export type ChannelEntry = {
	"channel_id": string
};

export const ChannelEntry = autoguard.Object.of<ChannelEntry>({
	"channel_id": autoguard.String
});

export type ProgramEntry = {
	"program_id": string,
	"channel_id": string,
	"file_id": string,
	"start_time_ms": number
};

export const ProgramEntry = autoguard.Object.of<ProgramEntry>({
	"program_id": autoguard.String,
	"channel_id": autoguard.String,
	"file_id": autoguard.String,
	"start_time_ms": autoguard.Number
});

export type ChannelDatabase = {
	"channels": ChannelEntry[],
	"programs": ProgramEntry[]
};

export const ChannelDatabase = autoguard.Object.of<ChannelDatabase>({
	"channels": autoguard.Array.of(autoguard.Reference.of<ChannelEntry>(() => ChannelEntry)),
	"programs": autoguard.Array.of(autoguard.Reference.of<ProgramEntry>(() => ProgramEntry))
});

export type Autoguard = {
	"ArtistEntry": ArtistEntry,
	"AlbumEntry": AlbumEntry,
	"DiscEntry": DiscEntry,
	"TrackEntry": TrackEntry,
	"AlbumArtistEntry": AlbumArtistEntry,
	"TrackArtistEntry": TrackArtistEntry,
	"VideoGenreEntry": VideoGenreEntry,
	"MovieEntry": MovieEntry,
	"MovieGenreEntry": MovieGenreEntry,
	"MoviePartEntry": MoviePartEntry,
	"ShowEntry": ShowEntry,
	"ShowGenreEntry": ShowGenreEntry,
	"SeasonEntry": SeasonEntry,
	"EpisodeEntry": EpisodeEntry,
	"SubtitleEntry": SubtitleEntry,
	"SubtitleContentEntry": SubtitleContentEntry,
	"CueEntry": CueEntry,
	"FileEntry": FileEntry,
	"MediaDatabase": MediaDatabase,
	"SubtitlesDatabase": SubtitlesDatabase,
	"AudiolistEntry": AudiolistEntry,
	"AudiolistItemEntry": AudiolistItemEntry,
	"ListDatabase": ListDatabase,
	"UserEntry": UserEntry,
	"AuthToken": AuthToken,
	"UserDatabase": UserDatabase,
	"Stream": Stream,
	"StreamDatabase": StreamDatabase,
	"ChannelEntry": ChannelEntry,
	"ProgramEntry": ProgramEntry,
	"ChannelDatabase": ChannelDatabase
};

export const Autoguard = {
	"ArtistEntry": ArtistEntry,
	"AlbumEntry": AlbumEntry,
	"DiscEntry": DiscEntry,
	"TrackEntry": TrackEntry,
	"AlbumArtistEntry": AlbumArtistEntry,
	"TrackArtistEntry": TrackArtistEntry,
	"VideoGenreEntry": VideoGenreEntry,
	"MovieEntry": MovieEntry,
	"MovieGenreEntry": MovieGenreEntry,
	"MoviePartEntry": MoviePartEntry,
	"ShowEntry": ShowEntry,
	"ShowGenreEntry": ShowGenreEntry,
	"SeasonEntry": SeasonEntry,
	"EpisodeEntry": EpisodeEntry,
	"SubtitleEntry": SubtitleEntry,
	"SubtitleContentEntry": SubtitleContentEntry,
	"CueEntry": CueEntry,
	"FileEntry": FileEntry,
	"MediaDatabase": MediaDatabase,
	"SubtitlesDatabase": SubtitlesDatabase,
	"AudiolistEntry": AudiolistEntry,
	"AudiolistItemEntry": AudiolistItemEntry,
	"ListDatabase": ListDatabase,
	"UserEntry": UserEntry,
	"AuthToken": AuthToken,
	"UserDatabase": UserDatabase,
	"Stream": Stream,
	"StreamDatabase": StreamDatabase,
	"ChannelEntry": ChannelEntry,
	"ProgramEntry": ProgramEntry,
	"ChannelDatabase": ChannelDatabase
};
