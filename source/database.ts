// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type ArtistEntry = {
	"artist_id": string,
	"title": string
};

export const ArtistEntry = {
	as(subject: any, path: string = ""): ArtistEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["artist_id"], path + "[\"artist_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ArtistEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AlbumEntry = {
	"album_id": string,
	"title": string,
	"year": number,
	"cover_file_id": (string | null)
};

export const AlbumEntry = {
	as(subject: any, path: string = ""): AlbumEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["album_id"], path + "[\"album_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if (subject === null) {
								return subject;
							}
							throw "Expected null at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["cover_file_id"], path + "[\"cover_file_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is AlbumEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type DiscEntry = {
	"disc_id": string,
	"album_id": string,
	"number": number
};

export const DiscEntry = {
	as(subject: any, path: string = ""): DiscEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["disc_id"], path + "[\"disc_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["album_id"], path + "[\"album_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is DiscEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type TrackEntry = {
	"track_id": string,
	"disc_id": string,
	"file_id": string,
	"title": string,
	"number": number,
	"duration": number
};

export const TrackEntry = {
	as(subject: any, path: string = ""): TrackEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["track_id"], path + "[\"track_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["disc_id"], path + "[\"disc_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["duration"], path + "[\"duration\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is TrackEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AlbumArtistEntry = {
	"album_id": string,
	"artist_id": string
};

export const AlbumArtistEntry = {
	as(subject: any, path: string = ""): AlbumArtistEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["album_id"], path + "[\"album_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["artist_id"], path + "[\"artist_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is AlbumArtistEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type TrackArtistEntry = {
	"track_id": string,
	"artist_id": string
};

export const TrackArtistEntry = {
	as(subject: any, path: string = ""): TrackArtistEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["track_id"], path + "[\"track_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["artist_id"], path + "[\"artist_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is TrackArtistEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type VideoGenreEntry = {
	"video_genre_id": string,
	"title": string
};

export const VideoGenreEntry = {
	as(subject: any, path: string = ""): VideoGenreEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["video_genre_id"], path + "[\"video_genre_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is VideoGenreEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MovieEntry = {
	"movie_id": string,
	"title": string,
	"year": number,
	"summary": (string | null),
	"poster_file_id": (string | null)
};

export const MovieEntry = {
	as(subject: any, path: string = ""): MovieEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["movie_id"], path + "[\"movie_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if (subject === null) {
								return subject;
							}
							throw "Expected null at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["summary"], path + "[\"summary\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if (subject === null) {
								return subject;
							}
							throw "Expected null at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["poster_file_id"], path + "[\"poster_file_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MovieEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MovieGenreEntry = {
	"movie_id": string,
	"video_genre_id": string
};

export const MovieGenreEntry = {
	as(subject: any, path: string = ""): MovieGenreEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["movie_id"], path + "[\"movie_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["video_genre_id"], path + "[\"video_genre_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MovieGenreEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MoviePartEntry = {
	"movie_part_id": string,
	"movie_id": string,
	"file_id": string,
	"duration": number,
	"number": number
};

export const MoviePartEntry = {
	as(subject: any, path: string = ""): MoviePartEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["movie_part_id"], path + "[\"movie_part_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["movie_id"], path + "[\"movie_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["duration"], path + "[\"duration\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MoviePartEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ShowEntry = {
	"show_id": string,
	"title": string
};

export const ShowEntry = {
	as(subject: any, path: string = ""): ShowEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["show_id"], path + "[\"show_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ShowEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ShowGenreEntry = {
	"show_id": string,
	"video_genre_id": string
};

export const ShowGenreEntry = {
	as(subject: any, path: string = ""): ShowGenreEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["show_id"], path + "[\"show_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["video_genre_id"], path + "[\"video_genre_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ShowGenreEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SeasonEntry = {
	"season_id": string,
	"show_id": string,
	"number": number
};

export const SeasonEntry = {
	as(subject: any, path: string = ""): SeasonEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["season_id"], path + "[\"season_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["show_id"], path + "[\"show_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is SeasonEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type EpisodeEntry = {
	"episode_id": string,
	"season_id": string,
	"file_id": string,
	"title": string,
	"number": number,
	"duration": number,
	"summary": (string | null)
};

export const EpisodeEntry = {
	as(subject: any, path: string = ""): EpisodeEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["episode_id"], path + "[\"episode_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["season_id"], path + "[\"season_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["duration"], path + "[\"duration\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if (subject === null) {
								return subject;
							}
							throw "Expected null at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["summary"], path + "[\"summary\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is EpisodeEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SubtitleEntry = {
	"subtitle_id": string,
	"file_id": string,
	"video_file_id": string,
	"language": (string | null)
};

export const SubtitleEntry = {
	as(subject: any, path: string = ""): SubtitleEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["subtitle_id"], path + "[\"subtitle_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["video_file_id"], path + "[\"video_file_id\"]");
				((subject, path) => {
					try {
						return ((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject, path);
					} catch (error) {}
					try {
						return ((subject, path) => {
							if (subject === null) {
								return subject;
							}
							throw "Expected null at " + path + "!";
						})(subject, path);
					} catch (error) {}
					throw "Expected a union at " + path + "!";
				})(subject["language"], path + "[\"language\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is SubtitleEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SubtitleContentEntry = {
	"subtitle_id": string,
	"cues": [
		number,
		number,
		string
	][]
};

export const SubtitleContentEntry = {
	as(subject: any, path: string = ""): SubtitleContentEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["subtitle_id"], path + "[\"subtitle_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.Array)) {
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.Number)) {
											return subject as number;
										}
										throw "Expected a number at " + path + "!";
									})(subject[0], path + "[0]");
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.Number)) {
											return subject as number;
										}
										throw "Expected a number at " + path + "!";
									})(subject[1], path + "[1]");
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.String)) {
											return subject as string;
										}
										throw "Expected a string at " + path + "!";
									})(subject[2], path + "[2]");
									return subject as [
										number,
										number,
										string
									];
								}
								throw "Expected a tuple at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["cues"], path + "[\"cues\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is SubtitleContentEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type CueEntry = {
	"cue_id": string,
	"subtitle_id": string,
	"start_ms": number,
	"duration_ms": number,
	"lines": string[]
};

export const CueEntry = {
	as(subject: any, path: string = ""): CueEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["cue_id"], path + "[\"cue_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["subtitle_id"], path + "[\"subtitle_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["start_ms"], path + "[\"start_ms\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["duration_ms"], path + "[\"duration_ms\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["lines"], path + "[\"lines\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is CueEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type FileEntry = {
	"file_id": string,
	"path": string[],
	"mime": string
};

export const FileEntry = {
	as(subject: any, path: string = ""): FileEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["path"], path + "[\"path\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["mime"], path + "[\"mime\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is FileEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MediaDatabase = {
	"audio": {
		"artists": ArtistEntry[],
		"albums": AlbumEntry[],
		"discs": DiscEntry[],
		"tracks": TrackEntry[],
		"album_artists": AlbumArtistEntry[],
		"track_artists": TrackArtistEntry[]
	},
	"video": {
		"genres": VideoGenreEntry[],
		"movie_parts": MoviePartEntry[],
		"movies": MovieEntry[],
		"movie_genres": MovieGenreEntry[],
		"shows": ShowEntry[],
		"show_genres": ShowGenreEntry[],
		"seasons": SeasonEntry[],
		"episodes": EpisodeEntry[],
		"subtitles": SubtitleEntry[],
		"subtitle_contents": SubtitleContentEntry[]
	},
	"files": FileEntry[]
};

export const MediaDatabase = {
	as(subject: any, path: string = ""): MediaDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(ArtistEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["artists"], path + "[\"artists\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(AlbumEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["albums"], path + "[\"albums\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(DiscEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["discs"], path + "[\"discs\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(TrackEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["tracks"], path + "[\"tracks\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(AlbumArtistEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["album_artists"], path + "[\"album_artists\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(TrackArtistEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["track_artists"], path + "[\"track_artists\"]");
						return subject;
					}
					throw "Expected an object at " + path + "!";
				})(subject["audio"], path + "[\"audio\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(VideoGenreEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["genres"], path + "[\"genres\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(MoviePartEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["movie_parts"], path + "[\"movie_parts\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(MovieEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["movies"], path + "[\"movies\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(MovieGenreEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["movie_genres"], path + "[\"movie_genres\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(ShowEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["shows"], path + "[\"shows\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(ShowGenreEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["show_genres"], path + "[\"show_genres\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SeasonEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["seasons"], path + "[\"seasons\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(EpisodeEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["episodes"], path + "[\"episodes\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SubtitleEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["subtitles"], path + "[\"subtitles\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									(SubtitleContentEntry.as)(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["subtitle_contents"], path + "[\"subtitle_contents\"]");
						return subject;
					}
					throw "Expected an object at " + path + "!";
				})(subject["video"], path + "[\"video\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(FileEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["files"], path + "[\"files\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MediaDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type SubtitlesDatabase = Record<string, undefined | string[]>;

export const SubtitlesDatabase = {
	as(subject: any, path: string = ""): SubtitlesDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					((subject, path) => {
						if ((subject != null) && (subject.constructor === globalThis.Array)) {
							for (let i = 0; i < subject.length; i++) {
								((subject, path) => {
									if ((subject != null) && (subject.constructor === globalThis.String)) {
										return subject as string;
									}
									throw "Expected a string at " + path + "!";
								})(subject[i], path + "[" + i + "]");
							}
							return subject;
						}
						throw "Expected an array at " + path + "!";
					})(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Expected a record at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is SubtitlesDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AudiolistEntry = {
	"audiolist_id": string,
	"title": string
};

export const AudiolistEntry = {
	as(subject: any, path: string = ""): AudiolistEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["audiolist_id"], path + "[\"audiolist_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is AudiolistEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AudiolistItemEntry = {
	"audiolist_id": string,
	"track_id": string,
	"number": number
};

export const AudiolistItemEntry = {
	as(subject: any, path: string = ""): AudiolistItemEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["audiolist_id"], path + "[\"audiolist_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["track_id"], path + "[\"track_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["number"], path + "[\"number\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is AudiolistItemEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ListDatabase = {
	"audiolists": AudiolistEntry[],
	"audiolist_items": AudiolistItemEntry[]
};

export const ListDatabase = {
	as(subject: any, path: string = ""): ListDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(AudiolistEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["audiolists"], path + "[\"audiolists\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(AudiolistItemEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["audiolist_items"], path + "[\"audiolist_items\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ListDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type UserEntry = {
	"user_id": string,
	"username": string,
	"password": string
};

export const UserEntry = {
	as(subject: any, path: string = ""): UserEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["user_id"], path + "[\"user_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["username"], path + "[\"username\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["password"], path + "[\"password\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is UserEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type AuthToken = {
	"username": string,
	"selector": string,
	"validator_hash": string,
	"expires_ms": number
};

export const AuthToken = {
	as(subject: any, path: string = ""): AuthToken {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["username"], path + "[\"username\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["selector"], path + "[\"selector\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["validator_hash"], path + "[\"validator_hash\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["expires_ms"], path + "[\"expires_ms\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is AuthToken {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type UserDatabase = {
	"users": UserEntry[],
	"tokens": AuthToken[]
};

export const UserDatabase = {
	as(subject: any, path: string = ""): UserDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(UserEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["users"], path + "[\"users\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(AuthToken.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["tokens"], path + "[\"tokens\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is UserDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Stream = {
	"username": string,
	"file_id": string,
	"timestamp_ms": number
};

export const Stream = {
	as(subject: any, path: string = ""): Stream {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["username"], path + "[\"username\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["timestamp_ms"], path + "[\"timestamp_ms\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is Stream {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type StreamDatabase = {
	"streams": Stream[]
};

export const StreamDatabase = {
	as(subject: any, path: string = ""): StreamDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(Stream.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["streams"], path + "[\"streams\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is StreamDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ChannelEntry = {
	"channel_id": string
};

export const ChannelEntry = {
	as(subject: any, path: string = ""): ChannelEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["channel_id"], path + "[\"channel_id\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ChannelEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ProgramEntry = {
	"program_id": string,
	"channel_id": string,
	"file_id": string,
	"start_time_ms": number
};

export const ProgramEntry = {
	as(subject: any, path: string = ""): ProgramEntry {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["program_id"], path + "[\"program_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["channel_id"], path + "[\"channel_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["file_id"], path + "[\"file_id\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["start_time_ms"], path + "[\"start_time_ms\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ProgramEntry {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type ChannelDatabase = {
	"channels": ChannelEntry[],
	"programs": ProgramEntry[]
};

export const ChannelDatabase = {
	as(subject: any, path: string = ""): ChannelDatabase {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(ChannelEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["channels"], path + "[\"channels\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							(ProgramEntry.as)(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["programs"], path + "[\"programs\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is ChannelDatabase {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"ArtistEntry": ArtistEntry,
	"AlbumEntry": AlbumEntry,
	"DiscEntry": DiscEntry,
	"TrackEntry": TrackEntry,
	"AlbumArtistEntry": AlbumArtistEntry,
	"TrackArtistEntry": TrackArtistEntry,
	"VideoGenreEntry": VideoGenreEntry,
	"MovieEntry": MovieEntry,
	"MovieGenreEntry": MovieGenreEntry,
	"MoviePartEntry": MoviePartEntry,
	"ShowEntry": ShowEntry,
	"ShowGenreEntry": ShowGenreEntry,
	"SeasonEntry": SeasonEntry,
	"EpisodeEntry": EpisodeEntry,
	"SubtitleEntry": SubtitleEntry,
	"SubtitleContentEntry": SubtitleContentEntry,
	"CueEntry": CueEntry,
	"FileEntry": FileEntry,
	"MediaDatabase": MediaDatabase,
	"SubtitlesDatabase": SubtitlesDatabase,
	"AudiolistEntry": AudiolistEntry,
	"AudiolistItemEntry": AudiolistItemEntry,
	"ListDatabase": ListDatabase,
	"UserEntry": UserEntry,
	"AuthToken": AuthToken,
	"UserDatabase": UserDatabase,
	"Stream": Stream,
	"StreamDatabase": StreamDatabase,
	"ChannelEntry": ChannelEntry,
	"ProgramEntry": ProgramEntry,
	"ChannelDatabase": ChannelDatabase
};

export const Autoguard = {
	"ArtistEntry": ArtistEntry,
	"AlbumEntry": AlbumEntry,
	"DiscEntry": DiscEntry,
	"TrackEntry": TrackEntry,
	"AlbumArtistEntry": AlbumArtistEntry,
	"TrackArtistEntry": TrackArtistEntry,
	"VideoGenreEntry": VideoGenreEntry,
	"MovieEntry": MovieEntry,
	"MovieGenreEntry": MovieGenreEntry,
	"MoviePartEntry": MoviePartEntry,
	"ShowEntry": ShowEntry,
	"ShowGenreEntry": ShowGenreEntry,
	"SeasonEntry": SeasonEntry,
	"EpisodeEntry": EpisodeEntry,
	"SubtitleEntry": SubtitleEntry,
	"SubtitleContentEntry": SubtitleContentEntry,
	"CueEntry": CueEntry,
	"FileEntry": FileEntry,
	"MediaDatabase": MediaDatabase,
	"SubtitlesDatabase": SubtitlesDatabase,
	"AudiolistEntry": AudiolistEntry,
	"AudiolistItemEntry": AudiolistItemEntry,
	"ListDatabase": ListDatabase,
	"UserEntry": UserEntry,
	"AuthToken": AuthToken,
	"UserDatabase": UserDatabase,
	"Stream": Stream,
	"StreamDatabase": StreamDatabase,
	"ChannelEntry": ChannelEntry,
	"ProgramEntry": ProgramEntry,
	"ChannelDatabase": ChannelDatabase
};
