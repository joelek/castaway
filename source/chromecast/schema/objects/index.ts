// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export const Image = autoguard.guards.Object.of({
	"url": autoguard.guards.String,
	"height": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"width": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	)
});

export type Image = ReturnType<typeof Image["as"]>;

export const Volume = autoguard.guards.Object.of({
	"level": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"muted": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Boolean
	)
});

export type Volume = ReturnType<typeof Volume["as"]>;

export const MediaInformation = autoguard.guards.Object.of({
	"contentId": autoguard.guards.String,
	"streamType": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("NONE"),
		autoguard.guards.StringLiteral.of("BUFFERED"),
		autoguard.guards.StringLiteral.of("LIVE")
	),
	"contentType": autoguard.guards.String,
	"metadata": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Union.of(
			autoguard.guards.Reference.of(() => GenericMediaMetadata),
			autoguard.guards.Reference.of(() => MovieMediaMetadata),
			autoguard.guards.Reference.of(() => TvShowMediaMetadata),
			autoguard.guards.Reference.of(() => MusicTrackMediaMetadata),
			autoguard.guards.Reference.of(() => PhotoMediaMetadata)
		)
	),
	"duration": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"customData": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Record.of(autoguard.guards.Any)
	),
	"tracks": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Array.of(autoguard.guards.Union.of(
			autoguard.guards.Object.of({
				"trackId": autoguard.guards.Number,
				"type": autoguard.guards.String
			}),
			autoguard.guards.Object.of({
				"trackId": autoguard.guards.Number,
				"type": autoguard.guards.StringLiteral.of("TEXT"),
				"trackType": autoguard.guards.StringLiteral.of("TEXT"),
				"trackContentId": autoguard.guards.String,
				"trackContentType": autoguard.guards.String,
				"subtype": autoguard.guards.StringLiteral.of("SUBTITLES"),
				"language": autoguard.guards.String,
				"name": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.String
				),
				"customData": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Record.of(autoguard.guards.Any)
				)
			})
		))
	)
});

export type MediaInformation = ReturnType<typeof MediaInformation["as"]>;

export const GenericMediaMetadata = autoguard.guards.Object.of({
	"metadataType": autoguard.guards.NumberLiteral.of(0),
	"title": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"subtitle": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"images": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Image))
	),
	"releaseDate": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	)
});

export type GenericMediaMetadata = ReturnType<typeof GenericMediaMetadata["as"]>;

export const MovieMediaMetadata = autoguard.guards.Object.of({
	"metadataType": autoguard.guards.NumberLiteral.of(1),
	"title": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"subtitle": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"studio": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"images": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Image))
	),
	"releaseDate": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	)
});

export type MovieMediaMetadata = ReturnType<typeof MovieMediaMetadata["as"]>;

export const TvShowMediaMetadata = autoguard.guards.Object.of({
	"metadataType": autoguard.guards.NumberLiteral.of(2),
	"seriesTitle": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"subtitle": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"season": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"episode": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"images": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Image))
	),
	"originalAirDate": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	)
});

export type TvShowMediaMetadata = ReturnType<typeof TvShowMediaMetadata["as"]>;

export const MusicTrackMediaMetadata = autoguard.guards.Object.of({
	"metadataType": autoguard.guards.NumberLiteral.of(3),
	"albumName": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"title": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"albumArtist": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"artist": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"composer": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"trackNumber": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"discNumber": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"images": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Array.of(autoguard.guards.Reference.of(() => Image))
	),
	"releaseDate": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	)
});

export type MusicTrackMediaMetadata = ReturnType<typeof MusicTrackMediaMetadata["as"]>;

export const PhotoMediaMetadata = autoguard.guards.Object.of({
	"metadataType": autoguard.guards.NumberLiteral.of(4),
	"title": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"artist": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"location": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"latitude": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"longitude": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"width": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"height": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Number
	),
	"creationDateTime": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	)
});

export type PhotoMediaMetadata = ReturnType<typeof PhotoMediaMetadata["as"]>;

export const MediaStatus = autoguard.guards.Object.of({
	"mediaSessionId": autoguard.guards.Number,
	"media": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Union.of(
			autoguard.guards.Reference.of(() => MediaInformation),
			autoguard.guards.Object.of({})
		)
	),
	"playbackRate": autoguard.guards.Number,
	"playerState": autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("IDLE"),
		autoguard.guards.StringLiteral.of("PLAYING"),
		autoguard.guards.StringLiteral.of("BUFFERING"),
		autoguard.guards.StringLiteral.of("PAUSED")
	),
	"idleReason": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Union.of(
			autoguard.guards.StringLiteral.of("CANCELLED"),
			autoguard.guards.StringLiteral.of("INTERRUPTED"),
			autoguard.guards.StringLiteral.of("FINISHED"),
			autoguard.guards.StringLiteral.of("ERROR")
		)
	),
	"currentTime": autoguard.guards.Number,
	"supportedMediaCommands": autoguard.guards.Number,
	"volume": autoguard.guards.Reference.of(() => Volume),
	"customData": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.Record.of(autoguard.guards.Any)
	)
});

export type MediaStatus = ReturnType<typeof MediaStatus["as"]>;

export namespace Autoguard {
	export const Guards = {
		"Image": autoguard.guards.Reference.of(() => Image),
		"Volume": autoguard.guards.Reference.of(() => Volume),
		"MediaInformation": autoguard.guards.Reference.of(() => MediaInformation),
		"GenericMediaMetadata": autoguard.guards.Reference.of(() => GenericMediaMetadata),
		"MovieMediaMetadata": autoguard.guards.Reference.of(() => MovieMediaMetadata),
		"TvShowMediaMetadata": autoguard.guards.Reference.of(() => TvShowMediaMetadata),
		"MusicTrackMediaMetadata": autoguard.guards.Reference.of(() => MusicTrackMediaMetadata),
		"PhotoMediaMetadata": autoguard.guards.Reference.of(() => PhotoMediaMetadata),
		"MediaStatus": autoguard.guards.Reference.of(() => MediaStatus)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
