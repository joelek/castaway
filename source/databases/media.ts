// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type Directory = {
	"directory_id": string,
	"name": string,
	"parent_directory_id"?: string
};

export const Directory = autoguard.Object.of<Directory>({
	"directory_id": autoguard.String,
	"name": autoguard.String,
	"parent_directory_id": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type File = {
	"file_id": string,
	"name": string,
	"format"?: "mp4" | "jpeg" | "vtt" | "json",
	"parent_directory_id"?: string,
	"index_timestamp"?: number
};

export const File = autoguard.Object.of<File>({
	"file_id": autoguard.String,
	"name": autoguard.String,
	"format": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Union.of(
			autoguard.StringLiteral.of("mp4"),
			autoguard.StringLiteral.of("jpeg"),
			autoguard.StringLiteral.of("vtt"),
			autoguard.StringLiteral.of("json")
		)
	),
	"parent_directory_id": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	),
	"index_timestamp": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	)
});

export type AudioResource = {
	"type": "audio",
	"duration_ms": number
};

export const AudioResource = autoguard.Object.of<AudioResource>({
	"type": autoguard.StringLiteral.of("audio"),
	"duration_ms": autoguard.Number
});

export type DataResource = {
	"type": "data"
};

export const DataResource = autoguard.Object.of<DataResource>({
	"type": autoguard.StringLiteral.of("data")
});

export type ImageResource = {
	"type": "image",
	"width": number,
	"height": number
};

export const ImageResource = autoguard.Object.of<ImageResource>({
	"type": autoguard.StringLiteral.of("image"),
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type SubtitleResource = {
	"type": "subtitle",
	"duration_ms": number,
	"language"?: string
};

export const SubtitleResource = autoguard.Object.of<SubtitleResource>({
	"type": autoguard.StringLiteral.of("subtitle"),
	"duration_ms": autoguard.Number,
	"language": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type VideoResource = {
	"type": "video",
	"duration_ms": number,
	"width": number,
	"height": number
};

export const VideoResource = autoguard.Object.of<VideoResource>({
	"type": autoguard.StringLiteral.of("video"),
	"duration_ms": autoguard.Number,
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type Resource = AudioResource | DataResource | ImageResource | SubtitleResource | VideoResource;

export const Resource = autoguard.Union.of(
	autoguard.Reference.of<AudioResource>(() => AudioResource),
	autoguard.Reference.of<DataResource>(() => DataResource),
	autoguard.Reference.of<ImageResource>(() => ImageResource),
	autoguard.Reference.of<SubtitleResource>(() => SubtitleResource),
	autoguard.Reference.of<VideoResource>(() => VideoResource)
);

export type FileAudioResource = AudioResource & {
	"resource_id": string,
	"file_id": string,
	"index": number
};

export const FileAudioResource = autoguard.Intersection.of(
	autoguard.Reference.of<AudioResource>(() => AudioResource),
	autoguard.Object.of<{
		"resource_id": string,
		"file_id": string,
		"index": number
	}>({
		"resource_id": autoguard.String,
		"file_id": autoguard.String,
		"index": autoguard.Number
	})
);

export type FileDataResource = DataResource & {
	"resource_id": string,
	"file_id": string,
	"index": number
};

export const FileDataResource = autoguard.Intersection.of(
	autoguard.Reference.of<DataResource>(() => DataResource),
	autoguard.Object.of<{
		"resource_id": string,
		"file_id": string,
		"index": number
	}>({
		"resource_id": autoguard.String,
		"file_id": autoguard.String,
		"index": autoguard.Number
	})
);

export type FileImageResource = ImageResource & {
	"resource_id": string,
	"file_id": string,
	"index": number
};

export const FileImageResource = autoguard.Intersection.of(
	autoguard.Reference.of<ImageResource>(() => ImageResource),
	autoguard.Object.of<{
		"resource_id": string,
		"file_id": string,
		"index": number
	}>({
		"resource_id": autoguard.String,
		"file_id": autoguard.String,
		"index": autoguard.Number
	})
);

export type FileSubtitleResource = SubtitleResource & {
	"resource_id": string,
	"file_id": string,
	"index": number
};

export const FileSubtitleResource = autoguard.Intersection.of(
	autoguard.Reference.of<SubtitleResource>(() => SubtitleResource),
	autoguard.Object.of<{
		"resource_id": string,
		"file_id": string,
		"index": number
	}>({
		"resource_id": autoguard.String,
		"file_id": autoguard.String,
		"index": autoguard.Number
	})
);

export type FileVideoResource = VideoResource & {
	"resource_id": string,
	"file_id": string,
	"index": number
};

export const FileVideoResource = autoguard.Intersection.of(
	autoguard.Reference.of<VideoResource>(() => VideoResource),
	autoguard.Object.of<{
		"resource_id": string,
		"file_id": string,
		"index": number
	}>({
		"resource_id": autoguard.String,
		"file_id": autoguard.String,
		"index": autoguard.Number
	})
);

export type FileResource = FileAudioResource | FileDataResource | FileImageResource | FileSubtitleResource | FileVideoResource;

export const FileResource = autoguard.Union.of(
	autoguard.Reference.of<FileAudioResource>(() => FileAudioResource),
	autoguard.Reference.of<FileDataResource>(() => FileDataResource),
	autoguard.Reference.of<FileImageResource>(() => FileImageResource),
	autoguard.Reference.of<FileSubtitleResource>(() => FileSubtitleResource),
	autoguard.Reference.of<FileVideoResource>(() => FileVideoResource)
);

export type Artist = {
	"artist_id": string,
	"name": string
};

export const Artist = autoguard.Object.of<Artist>({
	"artist_id": autoguard.String,
	"name": autoguard.String
});

export type Album = {
	"album_id": string,
	"title": string,
	"year"?: number
};

export const Album = autoguard.Object.of<Album>({
	"album_id": autoguard.String,
	"title": autoguard.String,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	)
});

export type AlbumFile = {
	"album_id": string,
	"file_id": string
};

export const AlbumFile = autoguard.Object.of<AlbumFile>({
	"album_id": autoguard.String,
	"file_id": autoguard.String
});

export type Disc = {
	"disc_id": string,
	"album_id": string,
	"number": number
};

export const Disc = autoguard.Object.of<Disc>({
	"disc_id": autoguard.String,
	"album_id": autoguard.String,
	"number": autoguard.Number
});

export type Track = {
	"track_id": string,
	"disc_id": string,
	"title": string,
	"number": number
};

export const Track = autoguard.Object.of<Track>({
	"track_id": autoguard.String,
	"disc_id": autoguard.String,
	"title": autoguard.String,
	"number": autoguard.Number
});

export type TrackFile = {
	"track_id": string,
	"file_id": string
};

export const TrackFile = autoguard.Object.of<TrackFile>({
	"track_id": autoguard.String,
	"file_id": autoguard.String
});

export type AlbumArtist = {
	"album_id": string,
	"artist_id": string,
	"order": number
};

export const AlbumArtist = autoguard.Object.of<AlbumArtist>({
	"album_id": autoguard.String,
	"artist_id": autoguard.String,
	"order": autoguard.Number
});

export type TrackArtist = {
	"track_id": string,
	"artist_id": string,
	"order": number
};

export const TrackArtist = autoguard.Object.of<TrackArtist>({
	"track_id": autoguard.String,
	"artist_id": autoguard.String,
	"order": autoguard.Number
});

export type Show = {
	"show_id": string,
	"name": string,
	"summary"?: string
};

export const Show = autoguard.Object.of<Show>({
	"show_id": autoguard.String,
	"name": autoguard.String,
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type ShowFile = {
	"show_id": string,
	"file_id": string
};

export const ShowFile = autoguard.Object.of<ShowFile>({
	"show_id": autoguard.String,
	"file_id": autoguard.String
});

export type Season = {
	"season_id": string,
	"show_id": string,
	"number": number
};

export const Season = autoguard.Object.of<Season>({
	"season_id": autoguard.String,
	"show_id": autoguard.String,
	"number": autoguard.Number
});

export type Episode = {
	"episode_id": string,
	"season_id": string,
	"title": string,
	"number": number,
	"year"?: number,
	"summary"?: string
};

export const Episode = autoguard.Object.of<Episode>({
	"episode_id": autoguard.String,
	"season_id": autoguard.String,
	"title": autoguard.String,
	"number": autoguard.Number,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type EpisodeFile = {
	"episode_id": string,
	"file_id": string
};

export const EpisodeFile = autoguard.Object.of<EpisodeFile>({
	"episode_id": autoguard.String,
	"file_id": autoguard.String
});

export type Movie = {
	"movie_id": string,
	"title": string,
	"year"?: number,
	"summary"?: string
};

export const Movie = autoguard.Object.of<Movie>({
	"movie_id": autoguard.String,
	"title": autoguard.String,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type MovieFile = {
	"movie_id": string,
	"file_id": string
};

export const MovieFile = autoguard.Object.of<MovieFile>({
	"movie_id": autoguard.String,
	"file_id": autoguard.String
});

export type Person = {
	"person_id": string,
	"name": string
};

export const Person = autoguard.Object.of<Person>({
	"person_id": autoguard.String,
	"name": autoguard.String
});

export type MoviePerson = {
	"movie_id": string,
	"person_id": string,
	"order": number
};

export const MoviePerson = autoguard.Object.of<MoviePerson>({
	"movie_id": autoguard.String,
	"person_id": autoguard.String,
	"order": autoguard.Number
});

export type ShowPerson = {
	"show_id": string,
	"person_id": string,
	"order": number
};

export const ShowPerson = autoguard.Object.of<ShowPerson>({
	"show_id": autoguard.String,
	"person_id": autoguard.String,
	"order": autoguard.Number
});

export type Genre = {
	"genre_id": string,
	"name": string
};

export const Genre = autoguard.Object.of<Genre>({
	"genre_id": autoguard.String,
	"name": autoguard.String
});

export type MovieGenre = {
	"movie_id": string,
	"genre_id": string,
	"order": number
};

export const MovieGenre = autoguard.Object.of<MovieGenre>({
	"movie_id": autoguard.String,
	"genre_id": autoguard.String,
	"order": autoguard.Number
});

export type ShowGenre = {
	"show_id": string,
	"genre_id": string,
	"order": number
};

export const ShowGenre = autoguard.Object.of<ShowGenre>({
	"show_id": autoguard.String,
	"genre_id": autoguard.String,
	"order": autoguard.Number
});

export type Cue = {
	"cue_id": string,
	"resource_id": string,
	"start_ms": number,
	"duration_ms": number,
	"lines": string[]
};

export const Cue = autoguard.Object.of<Cue>({
	"cue_id": autoguard.String,
	"resource_id": autoguard.String,
	"start_ms": autoguard.Number,
	"duration_ms": autoguard.Number,
	"lines": autoguard.Array.of(autoguard.String)
});

export type User = {
	"user_id": string,
	"name": string,
	"username": string,
	"password": string
};

export const User = autoguard.Object.of<User>({
	"user_id": autoguard.String,
	"name": autoguard.String,
	"username": autoguard.String,
	"password": autoguard.String
});

export type Token = {
	"token_id": string,
	"user_id": string,
	"validator": string,
	"expires_ms": number
};

export const Token = autoguard.Object.of<Token>({
	"token_id": autoguard.String,
	"user_id": autoguard.String,
	"validator": autoguard.String,
	"expires_ms": autoguard.Number
});

export type Stream = {
	"stream_id": string,
	"user_id": string,
	"file_id": string,
	"timestamp_ms": number
};

export const Stream = autoguard.Object.of<Stream>({
	"stream_id": autoguard.String,
	"user_id": autoguard.String,
	"file_id": autoguard.String,
	"timestamp_ms": autoguard.Number
});

export type Playlist = {
	"playlist_id": string,
	"title": string,
	"description": string,
	"user_id": string
};

export const Playlist = autoguard.Object.of<Playlist>({
	"playlist_id": autoguard.String,
	"title": autoguard.String,
	"description": autoguard.String,
	"user_id": autoguard.String
});

export type PlaylistItem = {
	"playlist_item_id": string,
	"playlist_id": string,
	"track_id": string,
	"number": number
};

export const PlaylistItem = autoguard.Object.of<PlaylistItem>({
	"playlist_item_id": autoguard.String,
	"playlist_id": autoguard.String,
	"track_id": autoguard.String,
	"number": autoguard.Number
});

export type Autoguard = {
	"Directory": Directory,
	"File": File,
	"AudioResource": AudioResource,
	"DataResource": DataResource,
	"ImageResource": ImageResource,
	"SubtitleResource": SubtitleResource,
	"VideoResource": VideoResource,
	"Resource": Resource,
	"FileAudioResource": FileAudioResource,
	"FileDataResource": FileDataResource,
	"FileImageResource": FileImageResource,
	"FileSubtitleResource": FileSubtitleResource,
	"FileVideoResource": FileVideoResource,
	"FileResource": FileResource,
	"Artist": Artist,
	"Album": Album,
	"AlbumFile": AlbumFile,
	"Disc": Disc,
	"Track": Track,
	"TrackFile": TrackFile,
	"AlbumArtist": AlbumArtist,
	"TrackArtist": TrackArtist,
	"Show": Show,
	"ShowFile": ShowFile,
	"Season": Season,
	"Episode": Episode,
	"EpisodeFile": EpisodeFile,
	"Movie": Movie,
	"MovieFile": MovieFile,
	"Person": Person,
	"MoviePerson": MoviePerson,
	"ShowPerson": ShowPerson,
	"Genre": Genre,
	"MovieGenre": MovieGenre,
	"ShowGenre": ShowGenre,
	"Cue": Cue,
	"User": User,
	"Token": Token,
	"Stream": Stream,
	"Playlist": Playlist,
	"PlaylistItem": PlaylistItem
};

export const Autoguard = {
	"Directory": Directory,
	"File": File,
	"AudioResource": AudioResource,
	"DataResource": DataResource,
	"ImageResource": ImageResource,
	"SubtitleResource": SubtitleResource,
	"VideoResource": VideoResource,
	"Resource": Resource,
	"FileAudioResource": FileAudioResource,
	"FileDataResource": FileDataResource,
	"FileImageResource": FileImageResource,
	"FileSubtitleResource": FileSubtitleResource,
	"FileVideoResource": FileVideoResource,
	"FileResource": FileResource,
	"Artist": Artist,
	"Album": Album,
	"AlbumFile": AlbumFile,
	"Disc": Disc,
	"Track": Track,
	"TrackFile": TrackFile,
	"AlbumArtist": AlbumArtist,
	"TrackArtist": TrackArtist,
	"Show": Show,
	"ShowFile": ShowFile,
	"Season": Season,
	"Episode": Episode,
	"EpisodeFile": EpisodeFile,
	"Movie": Movie,
	"MovieFile": MovieFile,
	"Person": Person,
	"MoviePerson": MoviePerson,
	"ShowPerson": ShowPerson,
	"Genre": Genre,
	"MovieGenre": MovieGenre,
	"ShowGenre": ShowGenre,
	"Cue": Cue,
	"User": User,
	"Token": Token,
	"Stream": Stream,
	"Playlist": Playlist,
	"PlaylistItem": PlaylistItem
};
