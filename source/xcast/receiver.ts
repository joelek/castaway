// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type Launch = {
	"type": "LAUNCH",
	"requestId": number,
	"appId": string
};

export const Launch = autoguard.Object.of<Launch>({
	"type": autoguard.StringLiteral.of("LAUNCH"),
	"requestId": autoguard.Number,
	"appId": autoguard.String
});

export type Stop = {
	"type": "STOP",
	"requestId": number,
	"sessionId": string
};

export const Stop = autoguard.Object.of<Stop>({
	"type": autoguard.StringLiteral.of("STOP"),
	"requestId": autoguard.Number,
	"sessionId": autoguard.String
});

export type GetStatus = {
	"type": "GET_STATUS",
	"requestId": number
};

export const GetStatus = autoguard.Object.of<GetStatus>({
	"type": autoguard.StringLiteral.of("GET_STATUS"),
	"requestId": autoguard.Number
});

export type GetAppAvailability = {
	"type": "GET_APP_AVAILABILITY",
	"requestId": number,
	"appId": string[]
};

export const GetAppAvailability = autoguard.Object.of<GetAppAvailability>({
	"type": autoguard.StringLiteral.of("GET_APP_AVAILABILITY"),
	"requestId": autoguard.Number,
	"appId": autoguard.Array.of(autoguard.String)
});

export type SetVolume = {
	"type": "SET_VOLUME",
	"requestId": number,
	"volume": ({
		"level": number
	} | {
		"muted": boolean
	})
};

export const SetVolume = autoguard.Object.of<SetVolume>({
	"type": autoguard.StringLiteral.of("SET_VOLUME"),
	"requestId": autoguard.Number,
	"volume": autoguard.Union.of(
		autoguard.Object.of<{
			"level": number
		}>({
			"level": autoguard.Number
		}),
		autoguard.Object.of<{
			"muted": boolean
		}>({
			"muted": autoguard.Boolean
		})
	)
});

export type ReceiverStatus = {
	"type": "RECEIVER_STATUS",
	"requestId": number,
	"status": {
		"applications": {
			"appId": string,
			"displayName": string,
			"iconUrl": string,
			"isIdleScreen": boolean,
			"launchedFromCloud": boolean,
			"namespaces": {
				"name": string
			}[],
			"sessionId": string,
			"statusText": string,
			"transportId": string
		}[],
		"userEq": {},
		"volume": {
			"controlType": string,
			"level": number,
			"muted": boolean,
			"stepInterval": number
		}
	}
};

export const ReceiverStatus = autoguard.Object.of<ReceiverStatus>({
	"type": autoguard.StringLiteral.of("RECEIVER_STATUS"),
	"requestId": autoguard.Number,
	"status": autoguard.Object.of<{
		"applications": {
			"appId": string,
			"displayName": string,
			"iconUrl": string,
			"isIdleScreen": boolean,
			"launchedFromCloud": boolean,
			"namespaces": {
				"name": string
			}[],
			"sessionId": string,
			"statusText": string,
			"transportId": string
		}[],
		"userEq": {},
		"volume": {
			"controlType": string,
			"level": number,
			"muted": boolean,
			"stepInterval": number
		}
	}>({
		"applications": autoguard.Array.of(autoguard.Object.of<{
			"appId": string,
			"displayName": string,
			"iconUrl": string,
			"isIdleScreen": boolean,
			"launchedFromCloud": boolean,
			"namespaces": {
				"name": string
			}[],
			"sessionId": string,
			"statusText": string,
			"transportId": string
		}>({
			"appId": autoguard.String,
			"displayName": autoguard.String,
			"iconUrl": autoguard.String,
			"isIdleScreen": autoguard.Boolean,
			"launchedFromCloud": autoguard.Boolean,
			"namespaces": autoguard.Array.of(autoguard.Object.of<{
				"name": string
			}>({
				"name": autoguard.String
			})),
			"sessionId": autoguard.String,
			"statusText": autoguard.String,
			"transportId": autoguard.String
		})),
		"userEq": autoguard.Object.of<{}>({}),
		"volume": autoguard.Object.of<{
			"controlType": string,
			"level": number,
			"muted": boolean,
			"stepInterval": number
		}>({
			"controlType": autoguard.String,
			"level": autoguard.Number,
			"muted": autoguard.Boolean,
			"stepInterval": autoguard.Number
		})
	})
});

export type Autoguard = {
	"Launch": Launch,
	"Stop": Stop,
	"GetStatus": GetStatus,
	"GetAppAvailability": GetAppAvailability,
	"SetVolume": SetVolume,
	"ReceiverStatus": ReceiverStatus
};

export const Autoguard = {
	"Launch": Launch,
	"Stop": Stop,
	"GetStatus": GetStatus,
	"GetAppAvailability": GetAppAvailability,
	"SetVolume": SetVolume,
	"ReceiverStatus": ReceiverStatus
};
