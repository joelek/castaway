// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

export type EpisodeMetadata = {
	"type": "episode",
	"imdb": string,
	"title": string,
	"year": number,
	"summary": string,
	"show": {
		"imdb": string,
		"title": string,
		"genres": string[]
	},
	"season": number,
	"episode": number
};

export const EpisodeMetadata = {
	as(subject: any, path: string = ""): EpisodeMetadata {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if (subject === "episode") {
						return subject;
					}
					throw "Expected \"episode\" at " + path + "!";
				})(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["imdb"], path + "[\"imdb\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["summary"], path + "[\"summary\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Object)) {
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject["imdb"], path + "[\"imdb\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.String)) {
								return subject as string;
							}
							throw "Expected a string at " + path + "!";
						})(subject["title"], path + "[\"title\"]");
						((subject, path) => {
							if ((subject != null) && (subject.constructor === globalThis.Array)) {
								for (let i = 0; i < subject.length; i++) {
									((subject, path) => {
										if ((subject != null) && (subject.constructor === globalThis.String)) {
											return subject as string;
										}
										throw "Expected a string at " + path + "!";
									})(subject[i], path + "[" + i + "]");
								}
								return subject;
							}
							throw "Expected an array at " + path + "!";
						})(subject["genres"], path + "[\"genres\"]");
						return subject;
					}
					throw "Expected an object at " + path + "!";
				})(subject["show"], path + "[\"show\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["season"], path + "[\"season\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["episode"], path + "[\"episode\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is EpisodeMetadata {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MovieMetadata = {
	"type": "movie",
	"imdb": string,
	"title": string,
	"year": number,
	"summary": string,
	"genres": string[]
};

export const MovieMetadata = {
	as(subject: any, path: string = ""): MovieMetadata {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				((subject, path) => {
					if (subject === "movie") {
						return subject;
					}
					throw "Expected \"movie\" at " + path + "!";
				})(subject["type"], path + "[\"type\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["imdb"], path + "[\"imdb\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["title"], path + "[\"title\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Number)) {
						return subject as number;
					}
					throw "Expected a number at " + path + "!";
				})(subject["year"], path + "[\"year\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.String)) {
						return subject as string;
					}
					throw "Expected a string at " + path + "!";
				})(subject["summary"], path + "[\"summary\"]");
				((subject, path) => {
					if ((subject != null) && (subject.constructor === globalThis.Array)) {
						for (let i = 0; i < subject.length; i++) {
							((subject, path) => {
								if ((subject != null) && (subject.constructor === globalThis.String)) {
									return subject as string;
								}
								throw "Expected a string at " + path + "!";
							})(subject[i], path + "[" + i + "]");
						}
						return subject;
					}
					throw "Expected an array at " + path + "!";
				})(subject["genres"], path + "[\"genres\"]");
				return subject;
			}
			throw "Expected an object at " + path + "!";
		})(subject, path);
	},
	is(subject: any): subject is MovieMetadata {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata
};

export const Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata
};
