// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "@joelek/ts-autoguard";

export type EpisodeMetadata = {
	"type": "episode",
	"title": string,
	"season": number,
	"episode": number,
	"year"?: number,
	"summary"?: string,
	"show": {
		"title": string,
		"summary"?: string,
		"genres": string[],
		"actors": string[]
	}
};

export const EpisodeMetadata = autoguard.Object.of<EpisodeMetadata>({
	"type": autoguard.StringLiteral.of("episode"),
	"title": autoguard.String,
	"season": autoguard.Number,
	"episode": autoguard.Number,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	),
	"show": autoguard.Object.of<{
		"title": string,
		"summary"?: string,
		"genres": string[],
		"actors": string[]
	}>({
		"title": autoguard.String,
		"summary": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.String
		),
		"genres": autoguard.Array.of(autoguard.String),
		"actors": autoguard.Array.of(autoguard.String)
	})
});

export type MovieMetadata = {
	"type": "movie",
	"title": string,
	"year"?: number,
	"summary"?: string,
	"genres": string[],
	"actors": string[]
};

export const MovieMetadata = autoguard.Object.of<MovieMetadata>({
	"type": autoguard.StringLiteral.of("movie"),
	"title": autoguard.String,
	"year": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Number
	),
	"summary": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	),
	"genres": autoguard.Array.of(autoguard.String),
	"actors": autoguard.Array.of(autoguard.String)
});

export type TrackMetadata = {
	"type": "track",
	"title": string,
	"disc": number,
	"track": number,
	"album": {
		"title": string,
		"year"?: number,
		"artists": {
			"title": string
		}[]
	},
	"artists": {
		"title": string
	}[]
};

export const TrackMetadata = autoguard.Object.of<TrackMetadata>({
	"type": autoguard.StringLiteral.of("track"),
	"title": autoguard.String,
	"disc": autoguard.Number,
	"track": autoguard.Number,
	"album": autoguard.Object.of<{
		"title": string,
		"year"?: number,
		"artists": {
			"title": string
		}[]
	}>({
		"title": autoguard.String,
		"year": autoguard.Union.of(
			autoguard.Undefined,
			autoguard.Number
		),
		"artists": autoguard.Array.of(autoguard.Object.of<{
			"title": string
		}>({
			"title": autoguard.String
		}))
	}),
	"artists": autoguard.Array.of(autoguard.Object.of<{
		"title": string
	}>({
		"title": autoguard.String
	}))
});

export type Metadata = EpisodeMetadata | MovieMetadata | TrackMetadata;

export const Metadata = autoguard.Union.of(
	autoguard.Reference.of<EpisodeMetadata>(() => EpisodeMetadata),
	autoguard.Reference.of<MovieMetadata>(() => MovieMetadata),
	autoguard.Reference.of<TrackMetadata>(() => TrackMetadata)
);

export type AudioResource = {
	"type": "audio",
	"duration_ms": number
};

export const AudioResource = autoguard.Object.of<AudioResource>({
	"type": autoguard.StringLiteral.of("audio"),
	"duration_ms": autoguard.Number
});

export type ImageResource = {
	"type": "image",
	"width": number,
	"height": number
};

export const ImageResource = autoguard.Object.of<ImageResource>({
	"type": autoguard.StringLiteral.of("image"),
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type MetadataResource = {
	"type": "metadata"
};

export const MetadataResource = autoguard.Object.of<MetadataResource>({
	"type": autoguard.StringLiteral.of("metadata")
});

export type SubtitleResource = {
	"type": "subtitle",
	"duration_ms": number,
	"language"?: string
};

export const SubtitleResource = autoguard.Object.of<SubtitleResource>({
	"type": autoguard.StringLiteral.of("subtitle"),
	"duration_ms": autoguard.Number,
	"language": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	)
});

export type VideoResource = {
	"type": "video",
	"duration_ms": number,
	"width": number,
	"height": number
};

export const VideoResource = autoguard.Object.of<VideoResource>({
	"type": autoguard.StringLiteral.of("video"),
	"duration_ms": autoguard.Number,
	"width": autoguard.Number,
	"height": autoguard.Number
});

export type Resource = AudioResource | ImageResource | MetadataResource | SubtitleResource | VideoResource;

export const Resource = autoguard.Union.of(
	autoguard.Reference.of<AudioResource>(() => AudioResource),
	autoguard.Reference.of<ImageResource>(() => ImageResource),
	autoguard.Reference.of<MetadataResource>(() => MetadataResource),
	autoguard.Reference.of<SubtitleResource>(() => SubtitleResource),
	autoguard.Reference.of<VideoResource>(() => VideoResource)
);

export type Probe = {
	"metadata"?: Metadata,
	"resources": Resource[]
};

export const Probe = autoguard.Object.of<Probe>({
	"metadata": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.Reference.of<Metadata>(() => Metadata)
	),
	"resources": autoguard.Array.of(autoguard.Reference.of<Resource>(() => Resource))
});

export type Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata,
	"TrackMetadata": TrackMetadata,
	"Metadata": Metadata,
	"AudioResource": AudioResource,
	"ImageResource": ImageResource,
	"MetadataResource": MetadataResource,
	"SubtitleResource": SubtitleResource,
	"VideoResource": VideoResource,
	"Resource": Resource,
	"Probe": Probe
};

export const Autoguard = {
	"EpisodeMetadata": EpisodeMetadata,
	"MovieMetadata": MovieMetadata,
	"TrackMetadata": TrackMetadata,
	"Metadata": Metadata,
	"AudioResource": AudioResource,
	"ImageResource": ImageResource,
	"MetadataResource": MetadataResource,
	"SubtitleResource": SubtitleResource,
	"VideoResource": VideoResource,
	"Resource": Resource,
	"Probe": Probe
};
