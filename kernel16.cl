/*
 * Copyright (c) 2010, Guoshen Yu <yu@cmap.polytechnique.fr>,
 *                     Guillermo Sapiro <guille@umn.edu>
 * Copyright (C) 2011, Michael Zucchi <notzed@gmail.com>
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//#pragma OPENCL EXTENSION cl_amd_printf : enable
#define d(x)

/* This code implements "DCT image denoising: a simple and effective image
 * denoising algorithm".
 *
 * http://www.ipol.im/pub/algo/ys_dct_denoising
 */

#define PATCHSIZE 16

constant float DCTbasis[] = {
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.25f,
0.35185093438159565f,
0.33832950029358816f,
0.31180625324666783f,
0.2733004667504394f,
0.2242918965856591f,
0.1666639146194367f,
0.10263113188058934f,
0.034654292299772925f,
-0.03465429229977288f,
-0.10263113188058928f,
-0.16666391461943666f,
-0.22429189658565904f,
-0.2733004667504394f,
-0.3118062532466678f,
-0.33832950029358816f,
-0.3518509343815956f,
0.3467599613305369f,
0.2939689006048397f,
0.1964237395967756f,
0.06897484482073578f,
-0.06897484482073574f,
-0.19642373959677548f,
-0.2939689006048397f,
-0.3467599613305369f,
-0.3467599613305369f,
-0.29396890060483977f,
-0.19642373959677553f,
-0.0689748448207359f,
0.06897484482073576f,
0.19642373959677542f,
0.2939689006048397f,
0.3467599613305368f,
0.33832950029358816f,
0.2242918965856591f,
0.034654292299772925f,
-0.16666391461943666f,
-0.3118062532466678f,
-0.35185093438159565f,
-0.27330046675043945f,
-0.10263113188058938f,
0.10263113188058924f,
0.27330046675043923f,
0.35185093438159565f,
0.31180625324666783f,
0.16666391461943675f,
-0.03465429229977264f,
-0.22429189658565885f,
-0.33832950029358805f,
0.32664074121909414f,
0.13529902503654928f,
-0.13529902503654925f,
-0.32664074121909414f,
-0.3266407412190942f,
-0.13529902503654945f,
0.13529902503654934f,
0.3266407412190941f,
0.32664074121909414f,
0.1352990250365495f,
-0.1352990250365493f,
-0.32664074121909403f,
-0.32664074121909414f,
-0.13529902503654953f,
0.13529902503654925f,
0.32664074121909403f,
0.31180625324666783f,
0.034654292299772925f,
-0.2733004667504394f,
-0.3383295002935882f,
-0.10263113188058938f,
0.22429189658565912f,
0.35185093438159565f,
0.16666391461943675f,
-0.16666391461943658f,
-0.35185093438159565f,
-0.22429189658565904f,
0.10263113188058946f,
0.33832950029358805f,
0.2733004667504396f,
-0.03465429229977256f,
-0.3118062532466677f,
0.2939689006048397f,
-0.06897484482073574f,
-0.3467599613305369f,
-0.19642373959677553f,
0.19642373959677542f,
0.3467599613305369f,
0.06897484482073593f,
-0.29396890060483966f,
-0.2939689006048398f,
0.06897484482073538f,
0.3467599613305369f,
0.19642373959677567f,
-0.1964237395967753f,
-0.34675996133053694f,
-0.06897484482073638f,
0.29396890060483927f,
0.2733004667504394f,
-0.16666391461943666f,
-0.3383295002935882f,
0.03465429229977269f,
0.35185093438159565f,
0.10263113188058942f,
-0.3118062532466678f,
-0.22429189658565904f,
0.22429189658565882f,
0.31180625324666794f,
-0.10263113188058942f,
-0.35185093438159565f,
-0.03465429229977361f,
0.3383295002935882f,
0.16666391461943691f,
-0.27330046675043895f,
0.25000000000000006f,
-0.25f,
-0.25000000000000006f,
0.24999999999999994f,
0.25000000000000006f,
-0.24999999999999972f,
-0.2499999999999999f,
0.2499999999999997f,
0.24999999999999992f,
-0.24999999999999964f,
-0.24999999999999994f,
0.24999999999999964f,
0.25f,
-0.2499999999999996f,
-0.25000000000000006f,
0.24999999999999956f,
0.2242918965856591f,
-0.3118062532466678f,
-0.10263113188058938f,
0.35185093438159565f,
-0.03465429229977264f,
-0.33832950029358816f,
0.16666391461943653f,
0.2733004667504396f,
-0.27330046675043934f,
-0.16666391461943686f,
0.3383295002935882f,
0.034654292299773654f,
-0.3518509343815957f,
0.1026311318805893f,
0.3118062532466683f,
-0.22429189658565865f,
0.1964237395967756f,
-0.3467599613305369f,
0.06897484482073576f,
0.2939689006048398f,
-0.29396890060483966f,
-0.06897484482073567f,
0.34675996133053694f,
-0.1964237395967753f,
-0.1964237395967757f,
0.3467599613305369f,
-0.06897484482073586f,
-0.2939689006048396f,
0.2939689006048392f,
0.0689748448207365f,
-0.346759961330537f,
0.19642373959677514f,
0.1666639146194367f,
-0.35185093438159565f,
0.22429189658565887f,
0.10263113188058971f,
-0.3383295002935883f,
0.273300466750439f,
0.03465429229977357f,
-0.3118062532466682f,
0.3118062532466674f,
-0.03465429229977184f,
-0.2733004667504401f,
0.3383295002935878f,
-0.10263113188058806f,
-0.22429189658566023f,
0.3518509343815955f,
-0.16666391461943517f,
0.13529902503654928f,
-0.3266407412190942f,
0.3266407412190941f,
-0.1352990250365493f,
-0.13529902503654953f,
0.32664074121909414f,
-0.32664074121909403f,
0.13529902503654917f,
0.13529902503654964f,
-0.3266407412190945f,
0.3266407412190942f,
-0.13529902503654906f,
-0.13529902503654978f,
0.3266407412190945f,
-0.3266407412190937f,
0.13529902503654775f,
0.10263113188058934f,
-0.27330046675043934f,
0.3518509343815956f,
-0.31180625324666805f,
0.16666391461943653f,
0.03465429229977232f,
-0.22429189658565912f,
0.33832950029358805f,
-0.3383295002935882f,
0.22429189658565962f,
-0.03465429229977301f,
-0.16666391461943592f,
0.3118062532466677f,
-0.3518509343815956f,
0.2733004667504404f,
-0.1026311318805903f,
0.06897484482073578f,
-0.19642373959677553f,
0.2939689006048398f,
-0.34675996133053694f,
0.3467599613305369f,
-0.2939689006048396f,
0.1964237395967753f,
-0.06897484482073586f,
-0.06897484482073646f,
0.19642373959677578f,
-0.2939689006048396f,
0.34675996133053705f,
-0.3467599613305366f,
0.2939689006048398f,
-0.19642373959677503f,
0.06897484482073434f,
0.034654292299772925f,
-0.10263113188058967f,
0.16666391461943675f,
-0.2242918965856595f,
0.2733004667504396f,
-0.3118062532466682f,
0.3383295002935884f,
-0.3518509343815957f,
0.3518509343815955f,
-0.3383295002935878f,
0.31180625324666733f,
-0.273300466750438f,
0.22429189658565854f,
-0.16666391461943508f,
0.10263113188058665f,
-0.0346542922997715f
};

/*
constant float DCTbasis[] = {
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  0.35355339059327373085750423342688009142875671386719f,
  //
  0.49039264020161521528962111915461719036102294921875f,
  0.41573480615127261783570133957255166023969650268555f,
  0.27778511650980114433551193542371038347482681274414f,
  0.09754516100806412404189416065491968765854835510254f,
  -0.09754516100806412404189416065491968765854835510254f,
  -0.27778511650980114433551193542371038347482681274414f,
  -0.41573480615127261783570133957255166023969650268555f,
  -0.49039264020161521528962111915461719036102294921875f,
  //
  0.46193976625564336924156805253005586564540863037109f,
  0.19134171618254489088961634024599334225058555603027f,
  -0.19134171618254489088961634024599334225058555603027f,
  -0.46193976625564336924156805253005586564540863037109f,
  -0.46193976625564336924156805253005586564540863037109f,
  -0.19134171618254489088961634024599334225058555603027f,
  0.19134171618254489088961634024599334225058555603027f,
  0.46193976625564336924156805253005586564540863037109f,
  //
  0.41573480615127261783570133957255166023969650268555f,
  -0.09754516100806417955304539191274670884013175964355f,
  -0.49039264020161521528962111915461719036102294921875f,
  -0.27778511650980108882436070416588336229324340820312f,
  0.27778511650980108882436070416588336229324340820312f,
  0.49039264020161521528962111915461719036102294921875f,
  0.09754516100806417955304539191274670884013175964355f,
  -0.41573480615127261783570133957255166023969650268555f,
  //
  0.35355339059327378636865546468470711261034011840820f,
  -0.35355339059327378636865546468470711261034011840820f,
  -0.35355339059327378636865546468470711261034011840820f,
  0.35355339059327378636865546468470711261034011840820f,
  0.35355339059327378636865546468470711261034011840820f,
  -0.35355339059327378636865546468470711261034011840820f,
  -0.35355339059327378636865546468470711261034011840820f,
  0.35355339059327378636865546468470711261034011840820f,
  //
  0.27778511650980114433551193542371038347482681274414f,
  -0.49039264020161532631192358167027123272418975830078f,
  0.09754516100806412404189416065491968765854835510254f,
  0.41573480615127261783570133957255166023969650268555f,
  -0.41573480615127261783570133957255166023969650268555f,
  -0.09754516100806412404189416065491968765854835510254f,
  0.49039264020161532631192358167027123272418975830078f,
  -0.27778511650980114433551193542371038347482681274414f,
  //
  0.19134171618254491864519195587490685284137725830078f,
  -0.46193976625564336924156805253005586564540863037109f,
  0.46193976625564336924156805253005586564540863037109f,
  -0.19134171618254491864519195587490685284137725830078f,
  -0.19134171618254491864519195587490685284137725830078f,
  0.46193976625564336924156805253005586564540863037109f,
  -0.46193976625564336924156805253005586564540863037109f,
  0.19134171618254491864519195587490685284137725830078f,
  //
  0.09754516100806416567525758409828995354473590850830f,
  -0.27778511650980108882436070416588336229324340820312f,
  0.41573480615127267334685257083037868142127990722656f,
  -0.49039264020161521528962111915461719036102294921875f,
  0.49039264020161521528962111915461719036102294921875f,
  -0.41573480615127267334685257083037868142127990722656f,
  0.27778511650980108882436070416588336229324340820312f,
  -0.09754516100806416567525758409828995354473590850830f
};
*/
/**
 * Perform  8x8 forward dct on data stored in local array
 */

//  dct_forward_threshold(ldata, ly*DFSTRIDE, ly, lx, DFSTRIDE, thr);

void dct_forward_threshold(local float *data, local float *weights, int soff, int doff, int j, int stride, float thr) {
  // rows
  float v = 0;
  for (int i = 0; i < PATCHSIZE; i++) {
    v += data[i + soff] * DCTbasis[j*PATCHSIZE+i];
  }

  barrier(CLK_LOCAL_MEM_FENCE);
  data[j + soff] = v;
  barrier(CLK_LOCAL_MEM_FENCE);

  // columns
  v = 0;
  for (int i = 0; i < PATCHSIZE; i++) {
    v += data[i * stride + doff] * DCTbasis[j*PATCHSIZE+i];
  }

  if (fabs(v) < thr) {
    v = 0.0f;
  } else {
    weights[(j * stride) + doff] += 1.0f;
  }

  barrier(CLK_LOCAL_MEM_FENCE);
  data[j * stride + doff] = v;
  barrier(CLK_LOCAL_MEM_FENCE);
}

void dct_inverse(local float *data, float weight, int soff, int doff, int j, int stride) {
  // rows
  float v = 0;

  for (int i = 0; i < PATCHSIZE; i++) {
    v += data[i + soff] * DCTbasis[i*PATCHSIZE+j];
  }

  barrier(CLK_LOCAL_MEM_FENCE);
  data[j + soff] = v;
  barrier(CLK_LOCAL_MEM_FENCE);

  // cols
  v = 0;
  for (int i = 0; i < PATCHSIZE; i++) {
    v += data[i * stride + doff] * DCTbasis[i*PATCHSIZE+j];
  }

  barrier(CLK_LOCAL_MEM_FENCE);
  data[j * stride + doff] = v * weight;
  barrier(CLK_LOCAL_MEM_FENCE);
}

#define DFSTRIDE (PATCHSIZE)    //FIXME Why not 8??

/**
 * Process a single 8x8 tile using DCT denoising algorithm.
 *
 * Forward DCT in local, threshold, then save.
 */
kernel void
__attribute__((reqd_work_group_size(PATCHSIZE, PATCHSIZE, 1)))
dct_denoise(read_only image2d_t src, global float *acc, float thr, int dx, int dy, int astride, int set, global float* acc_norm) {
  const sampler_t smp = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;
  local float ldata[PATCHSIZE*DFSTRIDE];
  local float weights[PATCHSIZE * PATCHSIZE];
  int lx = get_local_id(0);
  int ly = get_local_id(1);
  int x = get_global_id(0) + dx;
  int y = get_global_id(1) + dy;

  if ((x >= get_image_width(src)) | (y >= get_image_height(src))) {
    return;
  }

  float v = read_imagef(src, smp, (int2) { x, y }).s0;

  weights[(ly * DFSTRIDE) + lx] = 0;
  ldata[lx + ly*DFSTRIDE] = v;
  barrier(CLK_LOCAL_MEM_FENCE);

  dct_forward_threshold(ldata, weights, ly*DFSTRIDE, ly, lx, DFSTRIDE, thr);

  float weight = 0;
  for (int yi = 0; yi < PATCHSIZE; yi++) {
    for (int xi = 0; xi < PATCHSIZE; xi++) {
      weight += weights[yi * PATCHSIZE + xi];
    }
  }

  weight /= (PATCHSIZE * PATCHSIZE);

  dct_inverse(ldata, weight, ly*DFSTRIDE, ly, lx, DFSTRIDE);
  v = ldata[lx + ly*DFSTRIDE];

  if (set)
    acc[x + y * astride] = v;
  else
    acc[x + y * astride] += v;

  acc_norm[x + y * astride] += weight;

}
/**
 * Fix the accumulation results.
 */
kernel void
__attribute__((reqd_work_group_size(PATCHSIZE, PATCHSIZE, 1)))
dct_denoise_normalise(const global float *acc, write_only image2d_t dst, int astride, const global float* acc_norm) {
  int x = get_global_id(0);
  int y = get_global_id(1);
  float v;

  if ((x >= get_image_width(dst)) | (y >= get_image_height(dst)))
    return;

  v = acc[x + y * astride];

  float xc = (x < PATCHSIZE) ? x + 1 : x > get_image_width(dst) - PATCHSIZE ? get_image_width(dst) - x : PATCHSIZE;
  float yc = (y < PATCHSIZE) ? y + 1 : y > get_image_height(dst) - PATCHSIZE ? get_image_height(dst) - y : PATCHSIZE;
  float w = acc_norm[x + y * astride];

  v = v / w;



  write_imagef(dst, (int2) { x, y }, (float4) v);
}

